From 097b13be34aecab2e48874ee30ddc6fde56ba6cb Mon Sep 17 00:00:00 2001
From: Florian Beeres <yuuki@protonmail.com>
Date: Mon, 13 Sep 2021 12:31:06 +0200
Subject: [PATCH] Add context cancellation

---
 main.go | 41 ++++++++++++++++++++++++++++++++++-------
 1 file changed, 34 insertions(+), 7 deletions(-)

diff --git a/main.go b/main.go
index 638af00..09b28a5 100644
--- a/main.go
+++ b/main.go
@@ -1,35 +1,62 @@
 package main
 
 import (
+	"context"
 	"log"
+	"time"
 )
 
-func producer(strings []string) (<-chan string, error) {
+func producer(ctx context.Context, strings []string) (<-chan string, error) {
 	outChannel := make(chan string)
 
 	go func() {
 		defer close(outChannel)
+
 		for _, s := range strings {
-			outChannel <- s
+			time.Sleep(time.Second * 3)
+			select {
+			case <-ctx.Done():
+				return
+			case outChannel <- s:
+			}
 		}
 	}()
 
 	return outChannel, nil
 }
 
-func sink(values <-chan string) {
-	for value := range values {
-		log.Println(value)
+func sink(ctx context.Context, values <-chan string) {
+	for {
+		select {
+		case <-ctx.Done():
+			log.Print(ctx.Err().Error())
+			return
+		case val, ok := <-values:
+			if ok {
+				log.Printf("sink: %s", val)
+			} else {
+				log.Print("done")
+				return
+			}
+		}
 	}
 }
 
 func main() {
 	source := []string{"foo", "bar", "bax"}
 
-	outputChannel, err := producer(source)
+	ctx, cancel := context.WithCancel(context.Background())
+	defer cancel()
+
+	go func() {
+		time.Sleep(time.Second * 5)
+		cancel()
+	}()
+
+	outputChannel, err := producer(ctx, source)
 	if err != nil {
 		log.Fatal(err)
 	}
 
-	sink(outputChannel)
+	sink(ctx, outputChannel)
 }
-- 
2.30.1 (Apple Git-130)

